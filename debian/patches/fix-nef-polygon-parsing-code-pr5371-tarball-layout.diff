Description: Fix OOB issues in Nef_* (PR #5371)
Origin: https://github.com/CGAL/cgal/commit/e1870c15224ddd5d79b1df5b8248e4c6813d7398

Index: cgal/include/CGAL/Nef_2/PM_io_parser.h
===================================================================
--- cgal.orig/include/CGAL/Nef_2/PM_io_parser.h
+++ cgal/include/CGAL/Nef_2/PM_io_parser.h
@@ -200,6 +200,11 @@ bool PM_io_parser<PMDEC>::read_vertex(Ve
        !(in >> p) ||
        !check_sep("}") ) return false;
 
+  if(!(f >= 0 && ((iso && (std::size_t)f < fn) || (!iso && (std::size_t)f < en))))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   if (iso) v->set_face(Face_of[f]);
   else     v->set_halfedge(Halfedge_of[f]);
   mark(v) = m; point(v) = p;
@@ -229,10 +234,14 @@ bool PM_io_parser<PMDEC>::read_hedge(Hal
        !(in >> f) || !check_sep(",") ||
        !(in >> m) || !check_sep("}") )
     return false;
-  CGAL_assertion_msg
-     (eo >= 0 || (std::size_t) eo < en || epr >= 0 || (std::size_t) epr < en || ene >= 0 || (std::size_t) ene < en ||
-      v >= 0 || (std::size_t) v < vn || f >= 0 || (std::size_t) f < fn ,
-      "wrong index in read_hedge");
+
+  if(!(eo >= 0 && (std::size_t) eo < en && epr >= 0 && (std::size_t) epr < en && ene >= 0 && (std::size_t) ene < en &&
+       v >= 0 && (std::size_t) v < vn && f >= 0 && (std::size_t) f < fn ))
+  {
+    in.setstate(std::ios_base::badbit);
+    std::cerr<<"wrong index in read_hedge"<<std::endl;
+    return false;
+  }
 
   // precond: objects exist!
   CGAL_assertion(EI[e->opposite()]);
@@ -267,14 +276,28 @@ bool PM_io_parser<PMDEC>::read_face(Face
   int n, ei, vi; Mark m;
   if ( !(in >> n) || !check_sep("{") ) return false;
   if ( !(in >> ei) || !check_sep(",") ) return false;
-  if (ei >= 0) f->set_halfedge(Halfedge_of[ei]);
+  if (ei >= 0 && (std::size_t) ei < en)
+  {
+    f->set_halfedge(Halfedge_of[ei]);
+  }
+
   while (in >> ei) {
     CGAL_assertion_msg(ei >= 0 && (std::size_t) ei < en, "wrong index in face cycle list.");
+    if (!(ei >= 0 && (std::size_t)ei < en))
+    {
+      in.setstate(std::ios_base::badbit);
+      return false;
+    }
     f->store_fc(Halfedge_of[ei]);
   } in.clear();
   if (!check_sep(",")) { return false; }
   while (in >> vi) {
     CGAL_assertion_msg(vi >= 0 && (std::size_t) vi < vn, "wrong index in iso vertex list.");
+    if (!(vi >= 0 && (std::size_t)vi < vn))
+    {
+      in.setstate(std::ios_base::badbit);
+      return false;
+    }
     f->store_iv(Vertex_of[vi]);
   } in.clear();
   if (!check_sep(",") || !(in >> m) || !check_sep("}") )
@@ -313,13 +336,26 @@ template <typename PMDEC>
 void PM_io_parser<PMDEC>::read()
 {
   if ( !check_sep("Plane_map_2") )
-    CGAL_error_msg("PM_io_parser::read: no embedded_PM header.");
+  {
+    CGAL_warning_msg(false, "PM_io_parser::read: no embedded_PM header.");
+    return;
+  }
   if ( !(check_sep("vertices") && (in >> vn)) )
-    CGAL_error_msg("PM_io_parser::read: wrong node line.");
+  {
+    CGAL_warning_msg(false, "PM_io_parser::read: wrong node line.");
+    return;
+  }
+
   if ( !(check_sep("halfedges") && (in >> en) && (en%2==0)) )
-    CGAL_error_msg("PM_io_parser::read: wrong edge line.");
+  {
+    CGAL_warning_msg(false, "PM_io_parser::read: wrong edge line.");
+    return;
+  }
   if ( !(check_sep("faces") && (in >> fn)) )
-    CGAL_error_msg("PM_io_parser::read: wrong face line.");
+  {
+    CGAL_warning_msg(false, "PM_io_parser::read: wrong face line.");
+    return;
+  }
 
   Vertex_of.resize(vn);
   Halfedge_of.resize(en);
@@ -333,16 +369,24 @@ void PM_io_parser<PMDEC>::read()
 
   for(i=0; i<vn; i++) {
     if (!read_vertex(Vertex_of[i]))
-      CGAL_error_msg("PM_io_parser::read: error in node line");
+    {
+      CGAL_warning_msg(false, "PM_io_parser::read: error in node line");
+      return;
+    }
   }
   for(i=0; i<en; i++) {
     if (!read_hedge(Halfedge_of[i]))
-      CGAL_error_msg("PM_io_parser::read: error in halfedge\
-      line");
+    {
+      CGAL_warning_msg(false, "PM_io_parser::read: error in halfedge line");
+      return;
+    }
   }
   for(i=0; i<fn; i++) {
     if (!read_face(Face_of[i]))
-      CGAL_error_msg("PM_io_parser::read: error in face line");
+    {
+      CGAL_warning_msg(false, "PM_io_parser::read: error in face line");
+      return;
+    }
   }
 }
 
Index: cgal/include/CGAL/Nef_3/SNC_io_parser.h
===================================================================
--- cgal.orig/include/CGAL/Nef_3/SNC_io_parser.h
+++ cgal/include/CGAL/Nef_3/SNC_io_parser.h
@@ -1400,24 +1400,47 @@ template <typename EW>
 void SNC_io_parser<EW>::read()
 {
   if ( !check_sep("Selective Nef Complex") )
-    CGAL_error_msg("SNC_io_parser::read: no SNC header.");
+  {
+    CGAL_warning_msg(false, "SNC_io_parser::read: no SNC header.");
+    return;
+  }
   std::string kernel_type;
   in >> kernel_type;
   CGAL_assertion(kernel_type == "standard" || kernel_type == "extended");
   if ( !(check_sep("vertices") && (in >> vn)) )
-    CGAL_error_msg("SNC_io_parser::read: wrong vertex line.");
+  {
+    CGAL_warning_msg(false, "SNC_io_parser::read: wrong vertex line.");
+    return;
+  }
   if ( !(check_sep("halfedges") && (in >> en) && (en%2==0)) )
-    CGAL_error_msg("SNC_io_parser::read: wrong edge line.");
+  {
+    CGAL_warning_msg(false, "SNC_io_parser::read: wrong edge line.");
+    return;
+  }
   if ( !(check_sep("facets") && (in >> fn) && (fn%2==0)) )
-    CGAL_error_msg("SNC_io_parser::read: wrong facet line.");
+  {
+    CGAL_warning_msg(false, "SNC_io_parser::read: wrong facet line.");
+  }
   if ( !(check_sep("volumes") && (in >> cn)) )
-    CGAL_error_msg("SNC_io_parser::read: wrong volume line.");
+  {
+    CGAL_warning_msg(false, "SNC_io_parser::read: wrong volume line.");
+    return;
+  }
   if ( !(check_sep("shalfedges") && (in >> sen)) )
-    CGAL_error_msg("SNC_io_parser::read: wrong sedge line.");
+  {
+   CGAL_warning_msg(false, "SNC_io_parser::read: wrong sedge line.");
+   return;
+  }
   if ( !(check_sep("shalfloops") && (in >> sln)) )
-    CGAL_error_msg("SNC_io_parser::read: wrong sloop line.");
+  {
+    CGAL_warning_msg(false, "SNC_io_parser::read: wrong sloop line.");
+    return;
+  }
   if ( !(check_sep("sfaces") && (in >> sfn)) )
-    CGAL_error_msg("SNC_io_parser::read: wrong sface line.");
+  {
+    CGAL_warning_msg(false, "SNC_io_parser::read: wrong sface line.");
+    return;
+  }
 
   addInfiBox = (kernel_type == "standard" && Infi_box::extended_kernel());
 
@@ -1444,40 +1467,61 @@ void SNC_io_parser<EW>::read_items(int p
   typename std::vector<Vertex_iterator>::iterator vi;
   for(vi=Vertex_of.begin(); vi!=Vertex_of.end(); ++vi) {
     if (!read_vertex<K>(*vi))
-      CGAL_error_msg("SNC_io_parser::read: error in node line");
+    {
+      CGAL_warning_msg(false, "SNC_io_parser::read: error in node line");
+      return;
+    }
   }
 
   typename std::vector<Halfedge_iterator>::iterator ei;
   for(ei=Edge_of.begin(); ei!=Edge_of.end(); ++ei) {
     if (!read_edge<K>(*ei))
-      CGAL_error_msg("SNC_io_parser::read: error in edge line");
+    {
+      CGAL_warning_msg(false, "SNC_io_parser::read: error in edge line");
+      return;
+    }
   }
 
   typedef typename std::vector<Halffacet_iterator>::iterator vhf_iterator;
   vhf_iterator fi;
   for(fi=Halffacet_of.begin(); fi!=Halffacet_of.end(); ++fi) {
     if (!read_facet<K>(*fi))
-      CGAL_error_msg("SNC_io_parser::read: error in facet line");
+    {
+      CGAL_warning_msg(false, "SNC_io_parser::read: error in facet line");
+      return;
+    }
   }
   typename std::vector<Volume_iterator>::iterator ci;
   for(ci=Volume_of.begin()+plus01; ci!=Volume_of.end(); ++ci) {
     if (!read_volume(*ci))
-      CGAL_error_msg("SNC_io_parser::read: error in volume line");
+    {
+      CGAL_warning_msg(false, "SNC_io_parser::read: error in volume line");
+      return;
+    }
   }
   typename std::vector<SHalfedge_iterator>::iterator sei;
   for(sei=SEdge_of.begin(); sei!=SEdge_of.end(); ++sei) {
     if (!read_sedge<K>(*sei))
-      CGAL_error_msg("SNC_io_parser::read: error in sedge line");
+    {
+      CGAL_warning_msg(false, "SNC_io_parser::read: error in sedge line");
+      return;
+    }
   }
   typename std::vector<SHalfloop_iterator>::iterator sli;
   for(sli=SLoop_of.begin(); sli!=SLoop_of.end(); ++sli) {
     if (!read_sloop<K>(*sli))
-      CGAL_error_msg("SNC_io_parser::read: error in sloop line");
+    {
+      CGAL_warning_msg(false, "SNC_io_parser::read: error in sloop line");
+      return;
+    }
   }
   typename std::vector<SFace_iterator>::iterator sfi;
   for(sfi=SFace_of.begin(); sfi!=SFace_of.end(); ++sfi) {
     if (!read_sface(*sfi))
-      CGAL_error_msg("SNC_io_parser::read: error in sface line");
+    {
+      CGAL_warning_msg(false, "SNC_io_parser::read: error in sface line");
+      return;
+    }
   }
 
   SNC_constructor C(*this->sncp());
@@ -1535,21 +1579,56 @@ read_vertex(Vertex_handle vh) {
   vh->sncp() = this->sncp();
 
   in >> index;
+  if(index >= (int)en)
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   vh->svertices_begin() = (index >= 0 ? Edge_of[index] : this->svertices_end());
   in >> index;
+  if(index >= int(en))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   vh->svertices_last()  = index >= 0 ? Edge_of[index] : this->svertices_end();
   OK = OK && test_string(",");
   in >> index;
+  if(index >= int(sen))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   vh->shalfedges_begin() = index >= 0 ? SEdge_of[index] : this->shalfedges_end();
   in >> index;
+  if(index >= int(sen))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   vh->shalfedges_last()  = index >= 0 ? SEdge_of[index] : this->shalfedges_end();
   OK = OK && test_string(",");
   in >> index;
+  if(index >= int(sfn))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   vh->sfaces_begin() = index >= 0 ? SFace_of[index] : this->sfaces_end();
   in >> index;
+  if(index >= int(sfn))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   vh->sfaces_last()  = index >= 0 ? SFace_of[index] : this->sfaces_end();
   OK = OK && test_string(",");
   in >> index;
+  if(index >= int(sln))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   vh->shalfloop() = index >= 0 ? SLoop_of[index] : this->shalfloops_end();
   OK = OK && test_string("|");
 #ifdef CGAL_NEF_NATURAL_COORDINATE_INPUT
@@ -1604,17 +1683,37 @@ read_edge(Halfedge_handle eh) {
   OK = OK && test_string("{");
 
   in >> index;
+  if(index < 0 || index >= int(en))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   eh->twin() = Edge_of[index];
   OK = OK && test_string(",");
   in >> index;
+  if(index < 0 || index >= int(vn))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   eh->center_vertex() = Vertex_of[index];
   OK = OK && test_string(",");
   in >> index;
   if(index == 0) {
     in >> index;
+    if(index < 0 || index >= int(sen))
+    {
+      in.setstate(std::ios_base::badbit);
+      return false;
+    }
     eh->out_sedge() = SEdge_of[index];
   } else {
     in >> index;
+    if(index < 0 || index >= int(sfn))
+    {
+      in.setstate(std::ios_base::badbit);
+      return false;
+    }
     eh->incident_sface() = SFace_of[index];
   }
   OK = OK && test_string("|");
@@ -1669,6 +1768,11 @@ read_facet(Halffacet_handle fh) {
   OK = OK && test_string("{");
 
   in >> index;
+  if(index < 0 || index >= int(fn))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   fh->twin() = Halffacet_of[index];
   OK = OK && test_string(",");
 
@@ -1676,6 +1780,11 @@ read_facet(Halffacet_handle fh) {
   while(isdigit(cc)) {
     in.putback(cc);
     in >> index;
+    if(index < 0 || index >= int(sen))
+    {
+      in.setstate(std::ios_base::badbit);
+      return false;
+    }
     fh->boundary_entry_objects().push_back(make_object(SEdge_of[index]));
     in >> cc;
   }
@@ -1684,11 +1793,21 @@ read_facet(Halffacet_handle fh) {
   while(isdigit(cc)) {
     in.putback(cc);
     in >> index;
+    if(index < 0 || index >= int(sln))
+    {
+      in.setstate(std::ios_base::badbit);
+      return false;
+    }
     fh->boundary_entry_objects().push_back(make_object(SLoop_of[index]));
     in >> cc;
   }
 
   in >> index;
+  if(index < 0  || index >= int(cn))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   fh->incident_volume() = Volume_of[index+addInfiBox];
   OK = OK && test_string("|");
 #ifdef CGAL_NEF_NATURAL_COORDINATE_INPUT
@@ -1731,6 +1850,11 @@ read_volume(Volume_handle ch) {
   while(isdigit(cc)) {
     in.putback(cc);
     in >> index;
+    if(index < 0 || index >= int(sfn))
+    {
+      in.setstate(std::ios_base::badbit);
+      return false;
+    }
     ch->shell_entry_objects().push_back(make_object(SFace_of[index]));
     in >> cc;
   }
@@ -1781,27 +1905,67 @@ read_sedge(SHalfedge_handle seh) {
   OK = OK && test_string("{");
 
   in >> index;
+  if(index < 0 || index >= int(sen))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   seh->twin() = SEdge_of[index];
   OK = OK && test_string(",");
   in >> index;
+  if(index < 0 || index >= int(sen))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   seh->sprev() = SEdge_of[index];
   OK = OK && test_string(",");
   in >> index;
+  if(index < 0 || index >= int(sen))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   seh->snext() = SEdge_of[index];
   OK = OK && test_string(",");
   in >> index;
+  if(index < 0 || index >= int(en))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   seh->source() = Edge_of[index];
   OK = OK && test_string(",");
   in >> index;
+  if(index < 0 || index >= int(sfn))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   seh->incident_sface() = SFace_of[index];
   OK = OK && test_string(",");
   in >> index;
+  if(index < 0 || index >= int(sen))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   seh->prev() = SEdge_of[index];
   OK = OK && test_string(",");
   in >> index;
+  if(index < 0 || index >= int(sen))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   seh->next() = SEdge_of[index];
   OK = OK && test_string(",");
   in >> index;
+  if(index < 0 || index >= int(fn))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   seh->facet() = Halffacet_of[index];
   OK = OK && test_string("|");
 #ifdef CGAL_NEF_NATURAL_COORDINATE_INPUT
@@ -1852,12 +2016,27 @@ read_sloop(SHalfloop_handle slh) {
   OK = OK && test_string("{");
 
   in >> index;
+  if(index < 0 || index >= (int)(sln))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   slh->twin() = SLoop_of[index];
   OK = OK && test_string(",");
   in >> index;
+  if(index < 0 || index >= (int)(sfn))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   slh->incident_sface() = SFace_of[index];
   OK = OK && test_string(",");
   in >> index;
+  if(index < 0 || index >= (int)(fn))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   slh->facet() = Halffacet_of[index];
   OK = OK && test_string("|");
 #ifdef CGAL_NEF_NATURAL_COORDINATE_INPUT
@@ -1904,6 +2083,11 @@ read_sface(SFace_handle sfh) {
   OK = OK && test_string("{");
 
   in >> index;
+  if(index < 0 || index >= (int)(vn))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   sfh->center_vertex() = Vertex_of[index];
   OK = OK && test_string(",");
 
@@ -1913,6 +2097,11 @@ read_sface(SFace_handle sfh) {
     in >> index;
     //    sfh->boundary_entry_objects().push_back(SEdge_of[index]);
     SM_decorator SD(&*sfh->center_vertex());
+    if(index < 0 || index >= (int)(sen))
+    {
+      in.setstate(std::ios_base::badbit);
+      return false;
+    }
     SD.link_as_face_cycle(SEdge_of[index],sfh);
     in >> cc;
   }
@@ -1921,6 +2110,11 @@ read_sface(SFace_handle sfh) {
   while(isdigit(cc)) {
     in.putback(cc);
     in >> index;
+    if(index < 0 || index >= (int)(en))
+    {
+      in.setstate(std::ios_base::badbit);
+      return false;
+    }
     sfh->boundary_entry_objects().push_back(make_object(Edge_of[index]));
     this->sncp()->store_sm_boundary_item(Edge_of[index], --(sfh->sface_cycles_end()));
     in >> cc;
@@ -1930,12 +2124,22 @@ read_sface(SFace_handle sfh) {
   while(isdigit(cc)) {
     in.putback(cc);
     in >> index;
+    if(index < 0 || index >= (int)(sln))
+    {
+      in.setstate(std::ios_base::badbit);
+      return false;
+    }
     sfh->boundary_entry_objects().push_back(make_object(SLoop_of[index]));
     this->sncp()->store_sm_boundary_item(SLoop_of[index], --(sfh->sface_cycles_end()));
     in >> cc;
   }
 
   in >> index;
+  if(index < 0 || index >= (int)(cn))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
   sfh->volume() = Volume_of[index+addInfiBox];
   OK = OK && test_string("}");
   in >> sfh->mark();
Index: cgal/include/CGAL/Nef_S2/SM_io_parser.h
===================================================================
--- cgal.orig/include/CGAL/Nef_S2/SM_io_parser.h
+++ cgal/include/CGAL/Nef_S2/SM_io_parser.h
@@ -203,8 +203,14 @@ bool SM_io_parser<Decorator_>::read_vert
        !(in >> p) ||
        !check_sep("}") ) return false;
 
-  if (iso) set_face(v,SFace_of[f]);
-  else     set_first_out_edge(v,Edge_of[f]);
+  if(f<0 || (iso && f > fn) || (!iso && f > en))
+  {
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
+
+  if (iso) this->set_face(v,SFace_of[f]);
+  else     this->set_first_out_edge(v,Edge_of[f]);
   v->mark() = m; v->point() = p;
   return true;
 }
@@ -235,17 +241,21 @@ bool SM_io_parser<Decorator_>::read_edge
        !(in >> m) || !check_sep(",") ||
        !(in >> k) || !check_sep("}") )
     return false;
-  CGAL_assertion_msg
+  if (!
      (eo >= 0 && eo < en && epr >= 0 && epr < en && ene >= 0 && ene < en &&
-      v >= 0 && v < vn && f >= 0 && f < fn ,
-      "wrong index in read_edge");
+      v >= 0 && v < vn && f >= 0 && f < fn ))
+  {
+    std::cerr<<"wrong index in read_edge"<<std::endl;
+    in.setstate(std::ios_base::badbit);
+    return false;
+  }
 
   // precond: features exist!
   CGAL_assertion(EI[e->twin()]);
-  set_prev(e,Edge_of[epr]);
-  set_next(e,Edge_of[ene]);
-  set_source(e,SVertex_of[v]);
-  set_face(e,SFace_of[f]);
+  this->set_prev(e,Edge_of[epr]);
+  this->set_next(e,Edge_of[ene]);
+  this->set_source(e,SVertex_of[v]);
+  this->set_face(e,SFace_of[f]);
   e->mark() = m;
   e->circle() = k;
   return true;
@@ -274,7 +284,7 @@ bool SM_io_parser<Decorator_>::read_loop
   CGAL_assertion_msg(
     (lo >= 0 && lo < 2 && f >= 0 && f < fn),"wrong index in read_edge");
 
-  set_face(l,SFace_of[f]);
+  this->set_face(l,SFace_of[f]);
   l->mark() = m;
   l->circle() = k;
   return true;
@@ -303,21 +313,33 @@ bool SM_io_parser<Decorator_>::read_face
   int n, ei, vi, li; Mark m;
   if ( !(in >> n) || !check_sep("{") ) return false;
   while (in >> ei) {
-    CGAL_assertion_msg(ei >= 0 && ei < en,
-                           "wrong index in face cycle list.");
-    store_sm_boundary_object(Edge_of[ei],f);
+    if(!(ei >= 0 && ei < en))
+    {
+      std::cerr<<"wrong index in face cycle list."<<std::endl;
+      in.setstate(std::ios_base::badbit);
+      return false;
+    }
+    this->store_sm_boundary_object(Edge_of[ei],f);
   } in.clear();
   if (!check_sep(",")) { return false; }
   while (in >> vi) {
-    CGAL_assertion_msg(vi >= 0 && vi < vn,
-                           "wrong index in iso vertex list.");
-    store_sm_boundary_object(SVertex_of[vi],f);
+    if(!(vi >= 0 && vi < vn))
+    {
+      std::cerr<<"wrong index in iso vertex list."<<std::endl;
+      in.setstate(std::ios_base::badbit);
+      return false;
+    }
+    this->store_sm_boundary_object(SVertex_of[vi],f);
   } in.clear();
   if (!check_sep(",")) { return false; }
   while (in >> li) {
-    CGAL_assertion_msg(li >= 0 && li < 2,
-                           "wrong index in iso vertex list.");
-    store_sm_boundary_object(Loop_of[li],f);
+    if(!(li >= 0 && li < 2))
+    {
+      std::cerr<<"wrong index in iso vertex list."<<std::endl;
+      in.setstate(std::ios_base::badbit);
+      return false;
+    }
+    this->store_sm_boundary_object(Loop_of[li],f);
   } in.clear();
   if (!check_sep(",") || !(in >> m) || !check_sep("}") )
     return false;
@@ -357,16 +379,36 @@ void SM_io_parser<Decorator_>::print() c
 template <typename Decorator_>
 void SM_io_parser<Decorator_>::read()
 {
+  if ( !check_sep("Nef_polyhedron_S2") )
+  {
+   CGAL_warning_msg(false, "Missing line in header");
+   return;
+  }
   if ( !check_sep("Sphere_map_2") )
-    CGAL_error_msg("SM_io_parser::read: no embedded_PM header.");
+  {
+   CGAL_warning_msg(false, "SM_io_parser::read: no embedded_PM header.");
+   return;
+  }
   if ( !(check_sep("vertices") && (in >> vn)) )
-    CGAL_error_msg("SM_io_parser::read: wrong vertex line.");
+  {
+   CGAL_warning_msg(false, "SM_io_parser::read: wrong vertex line.");
+   return;
+  }
   if ( !(check_sep("edges") && (in >> en) && (en%2==0)) )
-    CGAL_error_msg("SM_io_parser::read: wrong edge line.");
+  {
+   CGAL_warning_msg(false, "SM_io_parser::read: wrong edge line.");
+   return;
+  }
   if ( !(check_sep("loops") && (in >> ln)) )
-    CGAL_error_msg("SM_io_parser::read: wrong loop line.");
+  {
+   CGAL_warning_msg(false, "SM_io_parser::read: wrong loop line.");
+   return;
+  }
   if ( !(check_sep("faces") && (in >> fn)) )
-    CGAL_error_msg("SM_io_parser::read: wrong face line.");
+  {
+   CGAL_warning_msg(false, "SM_io_parser::read: wrong face line.");
+   return;
+  }
 
   SVertex_of.resize(vn);
   Edge_of.resize(en);
@@ -383,18 +425,28 @@ void SM_io_parser<Decorator_>::read()
 
   for(i=0; i<vn; i++) {
     if (!read_vertex(SVertex_of[i]))
-      CGAL_error_msg("SM_io_parser::read: error in node line");
+    {
+     CGAL_warning_msg(false, "SM_io_parser::read: error in node line");
+     return;
+    }
   }
   for(i=0; i<en; i++) {
     if (!read_edge(Edge_of[i]))
-      CGAL_error_msg("SM_io_parser::read: error in edge line");
+    {
+     CGAL_warning_msg(false, "SM_io_parser::read: error in edge line");
+     return;
+    }
+
   }
   if ( ln == 2 ) {
     read_loop(Loop_of[0]); read_loop(Loop_of[1]);
   }
   for(i=0; i<fn; i++) {
     if (!read_face(SFace_of[i]))
-      CGAL_error_msg("SM_io_parser::read: error in face line");
+    {
+     CGAL_warning_msg(false, "SM_io_parser::read: error in face line");
+     return;
+    }
   }
 }
 
Index: cgal/include/CGAL/Nef_polyhedron_2.h
===================================================================
--- cgal.orig/include/CGAL/Nef_polyhedron_2.h
+++ cgal/include/CGAL/Nef_polyhedron_2.h
@@ -1112,6 +1112,8 @@ std::istream& operator>>
     std::cerr << "Nef_polyhedron_2 input corrupted." << std::endl;
     NP = Nef_polyhedron_2<T,Items,Mark>();
   }
+  if(!is)
+    return is;
   typename Nef_polyhedron_2<T,Items,Mark>::Topological_explorer D(NP.explorer());
   D.check_integrity_and_topological_planarity();
   return is;
